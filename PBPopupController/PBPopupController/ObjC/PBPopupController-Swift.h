// Generated by Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
#ifndef PBPOPUPCONTROLLER_SWIFT_H
#define PBPOPUPCONTROLLER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PBPopupController",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol PBPopupBarDataSource;
@protocol PBPopupBarPreviewingDelegate;
@class UITapGestureRecognizer;
@class UIViewController;
enum PBPopupBarStyle : NSInteger;
@class UIColor;
@class UIImage;
@class UIImageView;
@class PBPopupRoundShadowImageView;
@class UIBarButtonItem;
enum PBPopupBarProgressViewStyle : NSInteger;
enum PBPopupBarBorderViewStyle : NSInteger;
@class NSCoder;

/// A popup bar presented with a content view controller such as a <code>UITabBarController</code>, a <code>UINavigationController</code>, a <code>UIViewController</code> or a custom container view controller. The user can swipe or tap the popup bar at any point to present the popup content view controller. After presenting, the user dismisses the popup content view controller by either swiping or tapping an optional popup close button. The contents of the popup bar is built dynamically using its own properties. The popup bar may be a custom one if <code>PBPopupBar.customPopupBarViewController</code> is set.
SWIFT_CLASS("_TtC17PBPopupController10PBPopupBar")
@interface PBPopupBar : UIView
/// The data source of the PBPopupBar object.
/// seealso:
/// <code>PBPopupBarDataSource</code>.
@property (nonatomic, weak) id <PBPopupBarDataSource> _Nullable dataSource;
/// The previewing delegate object mediates the presentation of views from the preview (peek) view controller and the commit (pop) view controller. In practice, these two are typically the same view controller. The delegate performs this mediation through your implementation of the methods of the <code>PBPopupBarPreviewingDelegate</code> protocol.
/// seealso:
/// <code>PBPopupBarPreviewingDelegate</code>.
@property (nonatomic, weak) id <PBPopupBarPreviewingDelegate> _Nullable previewingDelegate;
/// For debug: If <code>true</code>, the popup bar will attribute some colors to its subviews.
@property (nonatomic) BOOL PBPopupBarShowColors;
/// The popup bar presentation duration when presenting from hidden to closed state.
/// seealso:
/// <code>PBPopupContentView.popupPresentationDuration</code>.
@property (nonatomic) NSTimeInterval popupBarPresentationDuration;
/// The tap gesture recognizer attached to the popup bar for presenting the popup content view.
@property (nonatomic, strong) UITapGestureRecognizer * _Null_unspecified popupTapGestureRecognizer;
/// Set this property with a custom popup bar view controller object to provide a popup bar with custom content. In this custom view controller, use the preferredContentSize property to set the size of the custom popup bar (example: preferredContentSize = CGSize(width: -1, height: 65)).
@property (nonatomic, strong) UIViewController * _Nullable customPopupBarViewController;
/// If <code>true</code>, the popup bar will automatically inherit its style from the bottom bar.
@property (nonatomic) BOOL inheritsVisualStyleFromBottomBar;
/// The popup bar style (see PBPopupBarStyle).
@property (nonatomic) enum PBPopupBarStyle popupBarStyle;
/// The bar style of the popup bar’ toolbar.
@property (nonatomic) UIBarStyle barStyle;
/// The popup bar background style that specifies its visual effect appearance.
/// seealso:
/// <code>UIBlurEffect.Style</code>
@property (nonatomic) enum UIBlurEffectStyle backgroundStyle;
/// A Boolean value that indicates whether the popup bar is translucent (<code>true</code>) or not (<code>false</code>).
@property (nonatomic) BOOL isTranslucent;
/// The background color of the popup bar’ toolbar.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The tint color to apply to the popup bar background.
@property (nonatomic, strong) UIColor * _Null_unspecified barTintColor;
/// The tint color to apply to the popup bar items.
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
/// The popup bar’s image.
/// note:
/// The image will only be displayed on prominent popup bars.
@property (nonatomic, strong) UIImage * _Nullable image;
/// An image view displayed when the bar style is prominent. (read-only)
@property (nonatomic, readonly, strong) UIImageView * _Null_unspecified imageView;
/// The view providing a shadow’ layer to the popup bar image view.
/// note:
/// Read-only, but its properties can be set. For example for no shadow, use <code>popupBar.shadowImageView.shadowOpacity = 0</code>.
@property (nonatomic, readonly, strong) PBPopupRoundShadowImageView * _Null_unspecified shadowImageView;
/// The popup bar’s title.
/// note:
/// If no subtitle is set, the title will be centered vertically.
@property (nonatomic, copy) NSString * _Nullable title;
/// Display attributes for the popup bar’s title text.
/// You may specify the font, text color, and shadow properties for the title in the text attributes dictionary, using the keys found in <code>NSAttributedString.h</code>.
@property (nonatomic, copy) NSDictionary<NSAttributedStringKey, id> * _Nullable titleTextAttributes;
/// The popup bar’s subtitle.
/// note:
/// If no title is set, the subtitle will be centered vertically.
@property (nonatomic, copy) NSString * _Nullable subtitle;
/// Display attributes for the popup bar’s subtitle text.
/// You may specify the font, text color, and shadow properties for the subtitle in the text attributes dictionary, using the keys found in <code>NSAttributedString.h</code>.
@property (nonatomic, copy) NSDictionary<NSAttributedStringKey, id> * _Nullable subtitleTextAttributes;
/// The string that succinctly identifies the accessibility element (titles view, the container for title and subtitle labels).
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
/// The string that briefly describes the result of performing an action on the accessibility title view (container for title and subtitle labels).
@property (nonatomic, copy) NSString * _Nullable accessibilityHint;
/// The semantic description of the view’s contents, used to determine whether the view should be flipped when switching between left-to-right and right-to-left layouts.
/// Defaults to <code>UISemanticContentAttribute.unspecified</code>
@property (nonatomic) UISemanticContentAttribute semanticContentAttribute;
/// An array of custom bar button items to display on the left side. Or right side if RTL.
@property (nonatomic, copy) NSArray<UIBarButtonItem *> * _Nullable leftBarButtonItems;
/// An array of custom bar button items to display on the right side. Or left side if RTL.
@property (nonatomic, copy) NSArray<UIBarButtonItem *> * _Nullable rightBarButtonItems;
/// The semantic description of the bar items, used to determine the order of bar items when switching between left-to-right and right-to-left layouts.
/// Defaults to <code>UISemanticContentAttribute.playback</code>
@property (nonatomic) UISemanticContentAttribute barButtonItemsSemanticContentAttribute;
/// The popup bar’s progress view style.
@property (nonatomic) enum PBPopupBarProgressViewStyle progressViewStyle;
/// The popup bar progress view’s progress.
/// The progress is represented by a floating-point value between 0.0 and 1.0, inclusive, where 1.0 indicates the completion of the task. The default value is 0.0. Values less than 0.0 and greater than 1.0 are pinned to those limits.
@property (nonatomic) float progress;
/// The popup bar’s border view style.
@property (nonatomic) enum PBPopupBarBorderViewStyle borderViewStyle;
/// The accessibility label of the progress, in a localized string.
@property (nonatomic, copy) NSString * _Nullable accessibilityProgressLabel;
/// The accessibility value of the progress, in a localized string.
@property (nonatomic, copy) NSString * _Nullable accessibilityProgressValue;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Call this method to update the popup bar appearance (style, tint color, etc.) according to its docking view. You should call this after updating the docking view.
/// If the popup bar’s <code>inheritsVisualStyleFromBottomBar</code> property is set to <code>false</code>, this method has no effect.
/// seealso:
/// <code>PBPopupBar.inheritsVisualStyleFromBottomBar</code>.
- (void)updatePopupBarAppearance;
/// :nodoc:
- (void)layoutSubviews;
@end



/// Available styles for the border view.
typedef SWIFT_ENUM(NSInteger, PBPopupBarBorderViewStyle, closed) {
/// Border view on left.
  PBPopupBarBorderViewStyleLeft = 0,
/// Border view on right.
  PBPopupBarBorderViewStyleRight = 1,
/// No border view.
  PBPopupBarBorderViewStyleNone = 2,
};

@class UILabel;

/// The data source providing custom labels instances to the popup bar so they can be used instead of the default provided ones.
SWIFT_PROTOCOL("_TtP17PBPopupController20PBPopupBarDataSource_")
@protocol PBPopupBarDataSource <NSObject>
@optional
/// Returns a UIlabel subclass object to be used by the popup bar instead of the default title label (for example a MarqueeLabel instance).
/// \param popupBar The popup bar object asking for a label.
///
///
/// returns:
/// A <code>UIlabel</code> object to be used instead of the default one.
- (UILabel * _Nullable)titleLabelFor:(PBPopupBar * _Nonnull)popupBar SWIFT_WARN_UNUSED_RESULT;
/// Returns a UIlabel subclass object to be used by the popup bar instead of the default subtitle label (for example a MarqueeLabel instance).
/// \param popupBar The popup bar object asking for a label.
///
///
/// returns:
/// A <code>UIlabel</code> object to be used instead of the default one.
- (UILabel * _Nullable)subtitleLabelFor:(PBPopupBar * _Nonnull)popupBar SWIFT_WARN_UNUSED_RESULT;
@end


/// A set of methods used by the delegate to respond, with a preview view controller and a commit view controller, to the user pressing the popup bar object on the screen of a device that supports 3D Touch.
SWIFT_PROTOCOL("_TtP17PBPopupController28PBPopupBarPreviewingDelegate_")
@protocol PBPopupBarPreviewingDelegate <NSObject>
@optional
/// Called when the user performs a peek action on the popup bar.
/// The default implementation returns <code>nil</code> and no preview is displayed.
/// \param popupBar The popup bar object.
///
///
/// returns:
/// The view controller whose view you want to provide as the preview (peek), or <code>nil</code> to disable preview.
- (UIViewController * _Nullable)previewingViewControllerFor:(PBPopupBar * _Nonnull)popupBar SWIFT_WARN_UNUSED_RESULT;
/// Called when the user performs a pop action on the popup bar.
/// The default implementation does not commit the view controller.
/// \param popupBar The popup bar object.
///
/// \param viewControllerToCommit The view controller to commit.
///
- (void)popupBar:(PBPopupBar * _Nonnull)popupBar commit:(UIViewController * _Nonnull)viewControllerToCommit;
@end

/// Available styles for the progress view.
/// Use the most appropriate style for the current operating system version. Uses none for iOS 10 and above, otherwise bottom.
typedef SWIFT_ENUM(NSInteger, PBPopupBarProgressViewStyle, closed) {
/// Progress view on bottom.
  PBPopupBarProgressViewStyleBottom = 0,
/// Progress view on top.
  PBPopupBarProgressViewStyleTop = 1,
/// No progress view.
  PBPopupBarProgressViewStyleNone = 2,
};

/// Available styles for the popup bar.
/// Use the most appropriate style for the current operating system version. Uses prominent style for iOS 10 and above, otherwise compact.
typedef SWIFT_ENUM(NSInteger, PBPopupBarStyle, closed) {
/// Prominent bar style
  PBPopupBarStyleProminent = 0,
/// Compact bar style
  PBPopupBarStyleCompact = 1,
/// Custom bar style
/// note:
/// Do not set this style directly. Instead set <code>PBPopupBar.customBarViewController</code> and the framework will use this style.
  PBPopupBarStyleCustom = 2,
};

enum PBPopupCloseButtonStyle : NSInteger;
@class UIVisualEffectView;

/// A button added to the content’s view when the popup content view controller is presented. The user can dismiss the popup content view controller by either swiping or tapping this popup close button.
SWIFT_CLASS("_TtC17PBPopupController18PBPopupCloseButton")
@interface PBPopupCloseButton : UIButton
/// The current style of the popup close button. (read-only)
/// note:
/// In order to change the button’s style, set the <code>popupCloseButtonStyle</code> property of the popup content view.
@property (nonatomic, readonly) enum PBPopupCloseButtonStyle style;
/// The button’s background view. (read-only)
/// The value of this property will be <code>nil</code> if <code>style</code> is not set to <code>PBPopupCloseButtonStyleRound</code>.
/// note:
/// Although this property is read-only, its own properties are read/write. Use these properties to configure the appearance and behavior of the button’s background view.
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nullable backgroundView;
/// The natural size for the receiving view, considering only properties of the view itself.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)tintColorDidChange;
- (void)setButtonStateStationary;
- (void)setButtonStateTransitioning;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// Available styles for the popup close button.
/// Use the most appropriate close button style for the current operating system version. Uses chevron button style for iOS 10 and above, otherwise round button.
typedef SWIFT_ENUM(NSInteger, PBPopupCloseButtonStyle, closed) {
/// Chevron close button style.
  PBPopupCloseButtonStyleChevron = 0,
/// Round close button style.
  PBPopupCloseButtonStyleRound = 1,
/// No close button.
  PBPopupCloseButtonStyleNone = 2,
};

enum PBPopupPresentationStyle : NSInteger;
@class NSLayoutConstraint;
@class UIEvent;

/// The view where is embedded the popupContentViewController’s view for presentation. This view has a optional close button and a visual effect view with an optional effect.
SWIFT_CLASS("_TtC17PBPopupController18PBPopupContentView")
@interface PBPopupContentView : UIView
/// The popup close button. (read-only).
/// The popup content view controller can place the popup close button within its own view hierarchy, instead of the system-defined placement.
@property (nonatomic, readonly, strong) PBPopupCloseButton * _Null_unspecified popupCloseButton;
/// The visual effect view behind the popup content view (read-only, but its effect can be set to nil).
@property (nonatomic, readonly, strong) UIVisualEffectView * _Null_unspecified popupEffectView;
/// The popup content view presentation style.
/// Default presentation style: deck, was fullScreen for iOS 9 and above, otherwise deck.
@property (nonatomic) enum PBPopupPresentationStyle popupPresentationStyle;
/// The popup content view presentation duration when presenting from closed to open state, or dismissing.
@property (nonatomic) NSTimeInterval popupPresentationDuration;
/// The popup content view dismissal duration when dismissing from open to closed state.
@property (nonatomic) NSTimeInterval popupDismissalDuration;
/// The threshold value used to open or close the popup content view when dragging.
@property (nonatomic) CGFloat popupCompletionThreshold;
/// The flick magnitude value used to open or close the popup content view when dragging.
@property (nonatomic) CGFloat popupCompletionFlickMagnitude;
/// The popup content view size when popupPresentationStyle is set to custom.
@property (nonatomic) CGSize popupContentSize;
/// If <code>true</code>, the popup content view can be dismissed when user interact outside the bounds.
@property (nonatomic) BOOL popupCanDismissOnPassthroughViews;
/// If <code>true</code>, tells the popup content view presentation to ignore the form sheet presentation by default.
@property (nonatomic) BOOL popupIgnoreDropShadowView;
/// The view containing the top subviews (i.e. labels, image view, etc…) of the popup content view controller (optional but needed if bottom module is used). Used to animate the popup presentation. This view will be used for correctly positioning the bottom module during presentation animation.
@property (nonatomic, strong) UIView * _Nullable popupTopModule;
/// The image view’s container view of the popup content view controller (optional). Useful for shadows. Used to animate the popup presentation.
@property (nonatomic, strong) UIView * _Nullable popupImageModule;
/// The image view of the popup content view controller (optional). Used to animate the popup presentation.
@property (nonatomic, strong) UIImageView * _Nullable popupImageView;
/// The view containing the controls subviews (i.e. playback buttons, volume slider, progress view, etc…) of the popup content view controller (optional). Used to animate the popup presentation. This view will be animated so as to be positioned under the image that grows.
@property (nonatomic, strong) UIView * _Nullable popupControlsModule SWIFT_DEPRECATED_MSG("Use popupBottomModule and popupTopModule instead");
/// The view containing the controls subviews (i.e. playback buttons, volume slider, progress view, etc…) of the popup content view controller (optional). Used to animate the popup presentation. This view will be animated so as to be positioned under the image that grows.
@property (nonatomic, strong) UIView * _Nullable popupBottomModule;
/// Required if popupControlsModule is provided. This is the top constraint against the popupImageModule view.
@property (nonatomic, strong) NSLayoutConstraint * _Nullable popupControlsModuleTopConstraint SWIFT_DEPRECATED_MSG("Use popupBottomModuleTopConstraint instead");
/// Required if popupBottomModule is provided. This is the top constraint against the popupTopModule view.
@property (nonatomic, strong) NSLayoutConstraint * _Nullable popupBottomModuleTopConstraint;
/// The popup close button style.
/// <ul>
///   <li>
///     SeeAldo: <code>PBPopupCloseButtonStyle</code>.
///   </li>
/// </ul>
@property (nonatomic) enum PBPopupCloseButtonStyle popupCloseButtonStyle;
/// If <code>true</code>, move close button under navigation bars
@property (nonatomic) BOOL popupCloseButtonAutomaticallyUnobstructsTopBars;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
/// :nodoc:
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


@protocol PBPopupControllerDataSource;
@protocol PBPopupControllerDelegate;
enum PBPopupPresentationState : NSInteger;
@class UIPanGestureRecognizer;

SWIFT_CLASS("_TtC17PBPopupController17PBPopupController")
@interface PBPopupController : NSObject
/// The data source of the PBPopupController object.
/// seealso:
/// <code>PBPopupControllerDataSource</code>.
@property (nonatomic, weak) id <PBPopupControllerDataSource> _Nullable dataSource;
/// The delegate of the PBPopupController object.
/// seealso:
/// <code>PBPopupControllerDelegate</code>.
@property (nonatomic, weak) id <PBPopupControllerDelegate> _Nullable delegate;
/// The state of the popup presentation. (read-only)
/// seealso:
///
/// <code>PBPopupPresentationState</code>.
/// <code>PBPopupControllerDelegate</code>.
@property (nonatomic, readonly) enum PBPopupPresentationState popupPresentationState;
/// The pan gesture recognizer attached to the popup bar for presenting the popup content view.
@property (nonatomic, strong) UIPanGestureRecognizer * _Null_unspecified popupBarPanGestureRecognizer;
/// The pan gesture recognizer attached to the popup content view for dismissing the popup content view.
@property (nonatomic, strong) UIPanGestureRecognizer * _Null_unspecified popupContentPanGestureRecognizer;
/// Set this property to <code>false</code> if you want addional safe area insets to be ignored when the popup bar is presented (usefull for iPad when the popup is the neighbour of another object).
@property (nonatomic) BOOL wantsAdditionalSafeAreaInsetBottom;
/// Set this property to <code>true</code> if you want addional safe area insets to be on top when the popup bar is presented (usefull for Catalyst when the popup is presented on top).
@property (nonatomic) BOOL wantsAdditionalSafeAreaInsetTop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol UIViewControllerPreviewing;

@interface PBPopupController (SWIFT_EXTENSION(PBPopupController)) <UIViewControllerPreviewingDelegate>
/// :nodoc:
- (UIViewController * _Nullable)previewingContext:(id <UIViewControllerPreviewing> _Nonnull)previewingContext viewControllerForLocation:(CGPoint)location SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)previewingContext:(id <UIViewControllerPreviewing> _Nonnull)previewingContext commitViewController:(UIViewController * _Nonnull)viewControllerToCommit;
@end


@protocol UIViewControllerAnimatedTransitioning;
@class UIPresentationController;
@protocol UIViewControllerInteractiveTransitioning;

@interface PBPopupController (SWIFT_EXTENSION(PBPopupController)) <UIViewControllerTransitioningDelegate>
/// :nodoc:
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForPresentation:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForDismissal:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP17PBPopupController27PBPopupControllerDataSource_")
@protocol PBPopupControllerDataSource <NSObject>
@optional
/// Returns a custom bottom bar view. The popup bar will be attached to.
/// \param popupController The popup controller object.
///
///
/// returns:
///
/// The view object representing the bottom bar view.
- (UIView * _Nullable)bottomBarViewFor:(PBPopupController * _Nonnull)popupController SWIFT_WARN_UNUSED_RESULT;
/// Returns the default frame for the bottom bar view.
/// seealso:
/// bottomBarView(for:)
/// \param popupController The popup controller object.
///
/// \param bottomBarView The bottom bar view returned by ‘bottomBarView(for:)’
///
///
/// returns:
///
/// The default frame for the bottom bar view, when the popup is in hidden or closed state. If <code>bottomBarView</code> returns nil or is not implemented, this method is not called, and the default system-provided frame is used.
- (CGRect)popupController:(PBPopupController * _Nonnull)popupController defaultFrameFor:(UIView * _Nonnull)bottomBarView SWIFT_WARN_UNUSED_RESULT;
/// Returns the insets for the bottom bar view from bottom of the container controller’s view. By default, this is set to the container controller view’s safe area insets since iOS 11 or <code>UIEdgeInsets.zero</code> otherwise. Currently, only the bottom inset is respected.
/// The system calculates the position of the popup bar by summing the bottom bar height and the bottom of the insets.
/// seealso:
/// bottomBarView(for:)
/// \param popupController The popup controller object.
///
/// \param bottomBarView The bottom bar view returned by ‘bottomBarView(for:)’
///
///
/// returns:
///
/// The insets for the bottom bar view from bottom of the container controller’s view. If <code>bottomBarView</code> returns nil or is not implemented, this method is not called, and the default system-provided bottom inset is used.
- (UIEdgeInsets)popupController:(PBPopupController * _Nonnull)popupController insetsFor:(UIView * _Nonnull)bottomBarView SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP17PBPopupController25PBPopupControllerDelegate_")
@protocol PBPopupControllerDelegate <NSObject>
@optional
/// Called just before the popup bar view is presenting.
/// \param popupController The popup controller object.
///
/// \param popupBar The popup bar object.
///
- (void)popupController:(PBPopupController * _Nonnull)popupController willPresent:(PBPopupBar * _Nonnull)popupBar;
/// Called just before the popup bar view is dismissing.
/// \param popupController The popup controller object.
///
/// \param popupBar The popup bar object.
///
- (void)popupController:(PBPopupController * _Nonnull)popupController willDismiss:(PBPopupBar * _Nonnull)popupBar;
/// Called just after the popup bar view is presenting.
/// \param popupController The popup controller object.
///
/// \param popupBar The popup bar object.
///
- (void)popupController:(PBPopupController * _Nonnull)popupController didPresent:(PBPopupBar * _Nonnull)popupBar;
/// Called just after the popup bar view is dismissing.
/// \param popupController The popup controller object.
///
/// \param popupBar The popup bar object.
///
- (void)popupController:(PBPopupController * _Nonnull)popupController didDismiss:(PBPopupBar * _Nonnull)popupBar;
/// Called just before the popup content view is about to be open.
/// \param popupController The popup controller object.
///
/// \param popupContentViewController The popup content view controller object.
///
- (void)popupController:(PBPopupController * _Nonnull)popupController willOpen:(UIViewController * _Nonnull)popupContentViewController;
/// Called just before the popup content view is about to be closed.
/// \param popupController The popup controller object.
///
/// \param popupContentViewController The popup content view controller object.
///
- (void)popupController:(PBPopupController * _Nonnull)popupController willClose:(UIViewController * _Nonnull)popupContentViewController;
/// Called just after the popup content view is open.
/// \param popupController The popup controller object.
///
/// \param popupContentViewController The popup content view controller object.
///
- (void)popupController:(PBPopupController * _Nonnull)popupController didOpen:(UIViewController * _Nonnull)popupContentViewController;
/// Called just after the popup content view is closed.
/// \param popupController The popup controller object.
///
/// \param popupContentViewController The popup content view controller object.
///
- (void)popupController:(PBPopupController * _Nonnull)popupController didClose:(UIViewController * _Nonnull)popupContentViewController;
/// Called several times during the interactive presentation.
/// note:
/// The current progress is represented by a floating-point value between 0.0 and 1.0, inclusive, where 1.0 indicates the completion of the interactive presentation.
/// seealso:
/// <code>PBPopupPresentationState</code>.
/// \param popupController The popup controller object.
///
/// \param popupContentViewController The popup content view controller object.
///
/// \param state The popup presentation state (closed / open).
///
/// \param progress The current progress of the interactive presentation
///
/// \param location The current location. The y-coordinate of the point on screen.
///
- (void)popupController:(PBPopupController * _Nonnull)popupController interactivePresentationFor:(UIViewController * _Nonnull)popupContentViewController state:(enum PBPopupPresentationState)state progress:(CGFloat)progress location:(CGFloat)location;
/// Called when the presentation state of the popup controller has changed.
/// seealso:
/// <code>PBPopupPresentationState</code>.
/// \param popupController The popup controller object.
///
/// \param state The popup presentation state.
///
/// \param previousState The previous popup presentation state.
///
- (void)popupController:(PBPopupController * _Nonnull)popupController stateChanged:(enum PBPopupPresentationState)state previousState:(enum PBPopupPresentationState)previousState;
/// Implement this to return NO when you want the tap gesture recognizer to be ignored.
/// seealso:
/// <code>PBPopupBar.popupTapGestureRecognizer</code>
/// \param popupController The popup controller object.
///
/// \param state The popup presentation state.
///
///
/// returns:
///
/// <code>false</code> if you want the pan gesture recognizer to be ignored, <code>true</code> otherwise.
- (BOOL)popupControllerTapGestureShouldBegin:(PBPopupController * _Nonnull)popupController state:(enum PBPopupPresentationState)state SWIFT_WARN_UNUSED_RESULT;
/// Implement this to return NO when you want the pan gesture recognizer to be ignored.
/// seealso:
///
/// <code>popupBarPanGestureRecognizer</code>
/// <code>popupContentPanGestureRecognizer</code>
/// \param popupController The popup controller object.
///
/// \param state The popup presentation state.
///
///
/// returns:
///
/// <code>false</code> if you want the pan gesture recognizer to be ignored, <code>true</code> otherwise.
- (BOOL)popupControllerPanGestureShouldBegin:(PBPopupController * _Nonnull)popupController state:(enum PBPopupPresentationState)state SWIFT_WARN_UNUSED_RESULT;
@end

/// Available states of PBPopupController.
typedef SWIFT_ENUM(NSInteger, PBPopupPresentationState, closed) {
/// The popup bar is hidden, not presented.
  PBPopupPresentationStateHidden = 0,
/// The popup bar is in presenting transition, will be shown. State will be closed.
  PBPopupPresentationStatePresenting = 1,
/// The popup bar is in dismissing transition, will be hidden, dismissed.
  PBPopupPresentationStateDismissing = 2,
/// The popup bar is dismissed.
  PBPopupPresentationStateDismissed = 3,
/// The popup bar is presented, popup content view is closed, hidden.
  PBPopupPresentationStateClosed = 4,
/// The popup bar is presented, hidden while popup content view is open, shown.
  PBPopupPresentationStateOpen = 5,
/// The popup content view is in presenting transition, will be open, shown.
  PBPopupPresentationStateOpening = 6,
/// The popup content view is in dismissing transition, will be closed, hidden.
  PBPopupPresentationStateClosing = 7,
};

/// Available popup content view presentation styles.
/// Use the most appropriate style for the current operating system version. Uses fullScreen for iOS 9 and above, otherwise deck.
typedef SWIFT_ENUM(NSInteger, PBPopupPresentationStyle, closed) {
/// A presentation style which attempt to recreate the card-like transition found in the iOS 10 Apple Music.
  PBPopupPresentationStyleDeck = 0,
/// A presentation style in which the presented view covers the screen.
  PBPopupPresentationStyleFullScreen = 1,
/// A presentation style in which the presented view covers a part of the screen (height only).
  PBPopupPresentationStyleCustom = 2,
};


/// A custom view that provide a shadow’s layer arround an image view with a corner radius.
SWIFT_CLASS("_TtC17PBPopupController27PBPopupRoundShadowImageView")
@interface PBPopupRoundShadowImageView : UIView
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
@property (nonatomic) CGSize shadowOffset;
@property (nonatomic) float shadowOpacity;
@property (nonatomic) CGFloat shadowRadius;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)layoutSubviews;
@end



@interface UIColor (SWIFT_EXTENSION(PBPopupController))
+ (UIColor * _Nullable)PBRandomDarkColor SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nullable)PBRandomLightColor SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nullable)PBRandomExtraLightColor SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)PBRandomColor SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)PBRandomAdaptiveColor SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=13.0);
+ (UIColor * _Nonnull)PBRandomAdaptiveInvertedColor SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=13.0);
@end



@interface UINavigationController (SWIFT_EXTENSION(PBPopupController))
/// :nodoc:
+ (void)nc_swizzle;
@end






@interface UITabBarController (SWIFT_EXTENSION(PBPopupController))
/// :nodoc:
+ (void)tbc_swizzle;
@end






@interface UIViewController (SWIFT_EXTENSION(PBPopupController))
/// :nodoc:
+ (void)vc_swizzle;
@end


@interface UIViewController (SWIFT_EXTENSION(PBPopupController))
/// The popup bar managed by the system. (read-only).
/// seealso:
/// <code>PBPopupBar</code>.
@property (nonatomic, readonly, weak) PBPopupBar * _Null_unspecified popupBar;
/// Returns a view to attach the popup bar to.
/// A default implementation is provided for <code>UIViewController</code>, <code>UINavigationController</code> and <code>UITabBarController</code>.
/// The default implmentation for <code>UIViewController</code> returns an invisible <code>UIView</code> instance, docked to the bottom of the screen. For <code>UINavigationController</code>, the toolbar is returned. For <code>UITabBarController</code>, the tab bar is returned.
@property (nonatomic, readonly, weak) UIView * _Null_unspecified bottomBar;
/// The popup controller (read-only).
/// seealso:
///
/// <ul>
///   <li>
///     <code>PBPopupController.dataSource</code>.
///   </li>
///   <li>
///     <code>PBPopupController.delegate</code>.
///   </li>
///   <li>
///     <code>PBPopupController.popupPresentationState</code>.
///   </li>
/// </ul>
@property (nonatomic, readonly, weak) PBPopupController * _Null_unspecified popupController;
/// Returns the container (presenting) view controller for the popup bar, and for the presented view controller (popupContentViewController). May be <code>UIViewController</code>, <code>UINavigationController</code>, <code>UITabBarController</code> or a custom container view controller. (read-only).
/// seealso:
/// <code>additionalSafeAreaInsetsBottomForContainer</code>.
@property (nonatomic, readonly, weak) UIViewController * _Null_unspecified popupContainerViewController;
/// Returns the popup content view controller of the container. If there is no popup bar presentation, the property will be <code>nil</code>. (read-only).
@property (nonatomic, readonly, weak) UIViewController * _Null_unspecified popupContentViewController;
/// Returns the view where is embedded the popupContentViewController’s view for presentation. This view has a optional close button and a visual effect view with an optional effect. (read-only).
/// seealso:
/// <code>PBPopupContentView</code>.
@property (nonatomic, readonly, weak) PBPopupContentView * _Null_unspecified popupContentView;
/// Custom insets that you specify to modify the container view controller’s safe area (usefull for a custom container). Use this property to adjust the safe area bottom edge inset value of this view controller’s views by the specified amount.
@property (nonatomic) CGFloat additionalSafeAreaInsetsBottomForContainer;
/// Presents an interactive popup bar in the container’s view hierarchy and optionally opens the popup in the same animation. The popup bar is attached to the container’s bottom bar (see <code>popupContainerViewController</code>).
/// You may call this method multiple times with different controllers, triggering replacement to the popup content view and update to the popup bar, if popup is open or bar presented, respectively.
/// The provided controller is retained by the system and will be released once a different controller is presented or when the popup bar is dismissed.
/// seealso:
/// <code>PBPopupBar.customPopupBarViewController</code> for a custom popup bar view controller.
/// <code>PBPopupController.dataSource</code> for a custom bottom bar view.
/// <code>presentPopupBar(withPopupContentViewController:animated:completion:)</code>.
/// \param controller The presented view controller for popup presentation.
///
/// \param openPopup Pass <code>true</code> to open the popup in the same animation; otherwise, pass <code>false</code>.
///
/// \param animated Pass <code>true</code> to animate the presentation; otherwise, pass <code>false</code>.
///
/// \param completion The block to execute after the presentation finishes. This block has no return value and takes no parameters. You may specify nil for this parameter.
///
- (void)presentPopupBarWithPopupContentViewController:(UIViewController * _Null_unspecified)controller openPopup:(BOOL)openPopup animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Presents an interactive popup bar in the container’s view hierarchy. The popup bar is attached to the container’s bottom bar (see <code>popupContainerViewController</code>).
/// You may call this method multiple times with different controllers, triggering replacement to the popup content view and update to the popup bar, if popup is open or bar presented, respectively.
/// The provided controller is retained by the system and will be released once a different controller is presented or when the popup bar is dismissed.
/// seealso:
/// <code>PBPopupBar.customPopupBarViewController</code> for a custom popup bar view controller.
/// <code>PBPopupController.dataSource</code> for a custom bottom bar view.
/// <code>presentPopupBar(withPopupContentViewController:openPopup:animated:completion:)</code>.
/// \param controller The presented view controller for popup presentation.
///
/// \param animated Pass <code>true</code> to animate the presentation; otherwise, pass <code>false</code>.
///
/// \param completion The block to execute after the presentation finishes. This block has no return value and takes no parameters. You may specify nil for this parameter.
///
- (void)presentPopupBarWithPopupContentViewController:(UIViewController * _Null_unspecified)controller animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Dismisses the popup presentation, closing the popup if open and dismissing the popup bar.
/// \param animated Pass <code>true</code> to animate the presentation; otherwise, pass <code>false</code>.
///
/// \param completion The block to execute after the presentation finishes. This block has no return value and takes no parameters. You may specify nil for this parameter.
///
- (void)dismissPopupBarWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Opens the popup, displaying the content view controller’s view.
/// \param animated Pass <code>true</code> to animate the presentation; otherwise, pass <code>false</code>.
///
/// \param completion The block to execute after the presentation finishes. This block has no return value and takes no parameters. You may specify nil for this parameter.
///
- (void)openPopupWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Closes the popup, hiding the content view controller’s view.
/// \param animated Pass <code>true</code> to animate the presentation; otherwise, pass <code>false</code>.
///
/// \param completion The block to execute after the presentation finishes. This block has no return value and takes no parameters. You may specify nil for this parameter.
///
- (void)closePopupWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Call this method to update the popup bar appearance (style, tint color, etc.) according to its docking view. You should call this after updating the docking view.
/// If the popup bar’s <code>inheritsVisualStyleFromBottomBar</code> property is set to <code>false</code>, this method has no effect.
/// seealso:
/// <code>PBPopupBar.inheritsVisualStyleFromBottomBar</code>.
- (void)updatePopupBarAppearance;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
